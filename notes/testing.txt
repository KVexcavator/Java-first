üîó –®–ø–∞—Ä–≥–∞–ª–∫–∞: –û—Å–Ω–æ–≤—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å JUnit

1Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å JUnit

–î–ª—è Maven:

<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-api</artifactId>
    <version>5.9.3</version>
    <scope>test</scope>
</dependency>
–î–ª—è Gradle:

testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'

2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å

–ù–∞—á–Ω–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–µ—Ç–æ–¥–∞ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π @Test:

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class MyTest {
    @Test
    public void testAddition() {
        int result = 2 + 2;
        assertEquals(4, result); // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç 4
    }
}

3Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ JUnit

- @Test ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–º.
- @BeforeEach ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è).
- @AfterEach ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ (–æ—á–∏—Å—Ç–∫–∞).
- @BeforeAll ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º).
- @AfterAll ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ (—Ç–æ–∂–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π).

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

@BeforeEach
public void setUp() {
    // –ö–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
}

@AfterEach
public void tearDown() {
    // –ö–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
}

4Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Å—Å–µ—Ä—Ç—ã (–ø—Ä–æ–≤–µ—Ä–∫–∏)

- assertEquals(expected, actual) ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π.
- assertNotEquals(expected, actual) ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ.
- assertTrue(condition) ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ.
- assertFalse(condition) ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —É—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ.
- assertNull(object) ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Ä–∞–≤–µ–Ω null.
- assertThrows(exception.class, () -> { ... }) ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.

5Ô∏è‚É£ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã

–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:

@ParameterizedTest
@ValueSource(strings = {"abc", "123", "xyz"})
public void testWithParameters(String input) {
    assertNotNull(input);
}

6Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ assertAll() –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –æ–¥–Ω–æ–º —Ç–µ—Å—Ç–µ

@Test
public void testMultipleAsserts() {
    assertAll(
        () -> assertEquals(4, 2 + 2),
        () -> assertTrue(3 > 1),
        () -> assertNotNull(new Object())
    );
}

7Ô∏è‚É£ –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

–î–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –∫–æ–¥–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ Mockito:

@Mock
private MyService myService;

@BeforeEach
public void setUp() {
    MockitoAnnotations.initMocks(this);
}

@Test
public void testWithMock() {
    when(myService.getData()).thenReturn("Mock Data");
    assertEquals("Mock Data", myService.getData());
}

8Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤

–í IDE —Ç–µ—Å—Ç—ã –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä—è–º–æ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞.
Maven: mvn test.
Gradle: gradle test.